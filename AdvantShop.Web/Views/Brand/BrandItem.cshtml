@using AdvantShop.Customers
@using AdvantShop.Helpers;
@model AdvantShop.ViewModel.Brand.BrandItemViewModel
@{
    Html.AddAsset("brand");
}
@{
    var brand = Model.Brand;
    var h1 = !string.IsNullOrEmpty(Html.GetPageH1().ToString()) ? Html.GetPageH1() : Html.Raw(brand.Name);
    var editLink = CustomerContext.CurrentCustomer.CustomerRole == Role.Administrator ||
                   (CustomerContext.CurrentCustomer.CustomerRole == Role.Moderator && CustomerContext.CurrentCustomer.HasRoleAction(RoleAction.Catalog));
}
<div class="desktop-col-p-v mobile-container-fluid brands-block">
    <div class="page-title-row brands-title-row">
        <div class="brands-title page-title cs-bg-4--mobile">
            <div class="main-title h1">@T("Brand.Index.BrandsHeader")</div>
        </div>
    </div>
    <div class="brand-navigator-wrap">
        <div class="row brand-navigation">
            <div class="col-xs-12 col-sm-3 col-p-v">
                <span class="select-custom cs-t-4 icon-down-open-after-abs brand-county-select">
                    @Html.DropDownList("country", Model.Countries, new {@class = "cs-bg-2", data_ng_model = "brand.CountryId", data_ng_init = "brand.CountryId = '" + @Model.CurentCountyId + "'", data_ng_change = "brand.changeCountyId(brand.CountryId)"})
                </span>
                <div class="rel vertical-interval-small">
                    @Html.TextBox("q", null, new {@class = "input-small brands-input-search", data_ng_model = "brand.brandName", data_ng_keypress = "brand.changeBrandname($event, brand.brandName)"})
                    <a href="" data-ng-click="brand.changeBrandname($event, brand.brandName)" class="btn-ghost icon-search-before-abs"></a>
                </div>
            </div>
            <div class="col-xs-12 col-sm-9  col-p-v">
                <div class="abc">
                    <div class="eng">
                        <a href="@Url.RouteUrl("BrandRoot")" class="letter all cs-bg-i-11 cs-l-6 cs-selected">@T("Brand.BrandItem.All")</a>
                        @Html.Partial("_Letters", Model.EnLetters)
                    </div>
                    <div class="rus">
                        @Html.Partial("_Letters", Model.RuLetters)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            @if (Model.Categories != null && brand.BrandLogo != null)
            {
                <div class="col-xs-12 col-sm-3 col-p-v site-body-aside">
                    <div class="logo-container center-aligner col-p-v">
                        <img class="align-item" data-qazy width="@SettingsPictureSize.BrandLogoWidth" height="@SettingsPictureSize.BrandLogoHeight" src="@brand.BrandLogo.ImageSrc()" alt="@Html.Encode(brand.Name)" @Html.InplaceImageBrand(brand.ID)/>
                    </div>
                    @Html.Partial("_BrandCategories", Model.Categories)
                </div>
            }

            <div class="col-xs col-p-v site-body-main">
                <div class="brand-txt cs-br-1">
                    @if (Model.Categories == null && brand.BrandLogo != null)
                    {
                        <div class="row">
                            <div class="middle-xs col-xs-2">
                                <div class="logo-container center-aligner col-p-v">
                                    <img class="align-item" data-qazy src="@brand.BrandLogo.ImageSrc()" alt="@Html.Encode(brand.Name)" @Html.InplaceImageBrand(brand.ID)/>
                                </div>
                            </div>
                            <div class="middle-xs col-xs">
                                <div>
                                    <div class="brand-item-title page-title">
                                        <h1 @Html.InplaceMeta(brand.ID, AdvantShop.SEO.MetaType.Brand)>@h1</h1>
                                    </div>
                                    @Html.Action("BreadCrumbs", "Common", new {breadCrumbs = Model.BreadCrumbs})
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="brand-item-title page-title">
                            <h1 @Html.InplaceMeta(brand.ID, AdvantShop.SEO.MetaType.Brand)>@h1</h1>
                        </div>
                        if (!SettingsDesign.IsMobileTemplate)
                        {
                            @Html.Action("BreadCrumbs", "Common", new {breadCrumbs = Model.BreadCrumbs})
                        }
                    }
                    @if (editLink)
                    {
                        <div class="m-b-sm">
                            <a target="_blank" href="@UrlService.GetUrl("adminv2/brands/edit/" + brand.ID)">@T("Brand.BrandItem.EditInAdminArea")</a>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(brand.BrandSiteUrl))
                    {
                        <div>
                            <a href="@brand.BrandSiteUrl" target="_blank">@T("Brand.BrandItem.BrandSiteUrl")</a>
                        </div>
                    }

                    @if ((!string.IsNullOrEmpty(brand.Description) || InplaceEditorService.CanUseInplace(RoleAction.Catalog)) && (Model.Pager == null || Model.Pager.CurrentPage == 1))
                    {
                        <div @Html.InplaceBrand(brand.ID, BrandInplaceField.Description)>
                            @Html.Raw(brand.Description)
                        </div>
                        <a href="@Url.RouteUrl("BrandRoot")" class="link-return ">@T("Brand.BrandItem.Back")</a>
                    }

                    @if (Model.ProductsList != null && Model.ProductsList.Products != null && Model.ProductsList.Products.Products.Any())
                    {
                        if (MobileHelper.IsMobileEnabled())
                        {
                            <div data-show-more
                                 data-request-url="/brand/GetBrandItem"
                                 data-data-params="{url: '@Model.Brand.UrlPath.ToString()', page: @Model.ProductsList.Pager.CurrentPage}">
                                <div class="h2 brand-list-product-title">@T("Brand.BrandItem.BrandProducts") @Html.Raw(brand.Name)</div>
                                <div class="products-view products-view-tile products-view-container brands-block-product-wrap"
                                     data-show-more-init-html>
                                    @Html.Partial("_ProductView", Model.ProductsList.Products)
                                </div>

                                <div class="products-view products-view-tile products-view-container brands-block-product-wrap"
                                     data-bind-html-compile="showMore.products">
                                </div>
                                <div data-ng-if="showMore.isShowSpinner"
                                     class="spinner-after spinner text-align-center">
                                </div>

                                <div class="panel no-borders pagination-block-wrap cs-br-1">
                                    <div class="text-align-center js-get-more-btn-wrap">
                                        <button type="button"
                                                data-ng-click="showMore.getMore()"
                                                class="btn btn-middle btn-action btn-block"
                                                data-ng-if="showMore.page < @Model.Pager.TotalPages">
                                            @T("Mobile.Catalog.ShowMore")
                                        </button>
                                    </div>
                                    @Html.Paging(Model.Pager, "center-aligner", "showMore", true)
                                </div>
                            </div>
                        }
                        else
                        {
                            <div>
                                <div class="h2 brand-list-product-title">@T("Brand.BrandItem.BrandProducts") @Html.Raw(brand.Name)</div>

                                <div class="row">
                                    <div class="@(!Model.Filter.AllowChangeViewMode ? "col-xs-12" : "col-xs-10")">
                                        <div class="row between-xs">
                                            @Html.Partial("~/Views/Catalog/Sorting.cshtml", Model.Filter)
                                            <div class="products-view-sort-result">
                                                <span class="products-view-sort-result-text cs-t-3">@T("Catalog.Index.ItemsFound")</span>
                                                <span class="products-view-sort-result-number">@Model.Pager.TotalItemsCount</span>
                                            </div>
                                        </div>
                                    </div>
                                    @if (Model.Filter.AllowChangeViewMode)
                                    {
                                        <div class="col-xs-2 flex middle-xs products-view-variants-wrap">
                                            @Html.Action("ChangeMode", "Catalog", new {name = "productViewCatalog", viewMode = Model.Filter.ViewMode})
                                        </div>
                                    }
                                </div>

                                <div class="row products-view products-view-@Model.Filter.ViewMode" product-view-mode data-name="productViewCatalog" data-current="@Model.Filter.ViewMode">
                                    @Html.Partial("_ProductView", Model.ProductsList.Products)
                                </div>
                                @Html.Paging(Model.ProductsList.Pager)
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>