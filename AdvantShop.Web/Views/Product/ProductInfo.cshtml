@using AdvantShop.Core.Services.Catalog
@using AdvantShop.Customers
@model AdvantShop.ViewModel.ProductDetails.ProductDetailsViewModel
@{
    var product = Model.Product;
    var offer = Model.Offer;
    var prodMinAmount = product.MinAmount == null
                            ? product.Multiplicity
                            : product.Multiplicity > product.MinAmount
                                ? product.Multiplicity
                                : product.MinAmount.Value;
    var editLinkIsAvailable = CustomerContext.CurrentCustomer.CustomerRole == Role.Administrator ||
                   (CustomerContext.CurrentCustomer.CustomerRole == Role.Moderator && CustomerContext.CurrentCustomer.HasRoleAction(RoleAction.Catalog));

    var ngOffer = "{{product.offerSelected.OfferId || '" + (offer != null ? offer.OfferId.ToString() : "") + "'}}";
    var notAllowBuyOutOfStockProducts = (!Model.AllowBuyOutOfStockProducts).ToLowerString();

    var artNo = offer != null ? offer.ArtNo : product.ArtNo;
}

@if (editLinkIsAvailable)
{
    <div class="details-row">
        <a target="_blank" href="@UrlService.GetUrl("adminv2/product/edit/" + product.ProductId)">@T("Product.ProductInfo.EditInAdminArea")</a>
    </div>
}
@if (product.Brand != null || Model.AllowReviews)
{
    <div class="details-row details-meta">
        <div class="products-view-meta">
            <ul class="products-view-meta-list">
                @if (product.Brand != null && product.Brand.Enabled)
                {
                    <li class="products-view-meta-item cs-br-1 details-brand-name" @Html.Raw(!Model.Product.Adult ? "itemprop=\"brand\" itemtype=\"https://schema.org/Brand\" itemscope" : "")>
                        <span>@T("Product.ProductInfo.Brand"): <a href="@Url.AbsoluteRouteUrl("Brand", new {url = product.Brand.UrlPath})">@product.Brand.Name</a></span>
                        @if (!Model.Product.Adult)
                        {
                            <meta itemprop="name" content="@product.Brand.Name" />
                        }
                    </li>
                }
                @if (Model.AllowReviews)
                {
                    <li class="products-view-meta-item cs-br-1 details-reviews">
                        <a href="" data-tabs-goto="tabReviews">@Html.Raw(Model.ReviewsCount)</a>
                    </li>
                }
            </ul>
        </div>
    </div>
}
<div class="details-row details-sku">
    <div class="details-param-name">@T("Product.ProductInfo.Sku"):</div>
    <div class="details-param-value inplace-offset"
         data-ng-bind="product.offerSelected.ArtNo"
         data-ng-init="product.offerSelected.ArtNo = '@artNo'"
         @(offer != null ? Html.InplaceOfferArtNo("{{product.offerSelected.OfferId || '" + offer.OfferId + "'}}") : Html.InplaceProduct(product.ProductId, ProductInplaceField.ArtNo, true))>@artNo
    </div>
    @if (!Model.Product.Adult)
    {
        <meta itemprop="mpn" content="@(!product.Gtin.IsNullOrEmpty() ? product.Gtin : artNo)"/>
        <meta itemprop="sku" content="@artNo" />
    }
    @if (!string.IsNullOrEmpty(product.Gtin))
    {
        <meta itemprop="gtin" content="@product.Gtin" />
    }
</div>
    @if (SettingsCatalog.DisplayDimensions)
    {
        var length = offer != null ? offer.GetLength() : 0;
        var width = offer != null ? offer.GetWidth() : 0;
        var height = offer != null ? offer.GetHeight() : 0;

        if (length != 0 || width != 0 || height != 0)
        {
            <div class="details-row details-dimensions">
                <div class="details-param-name">@T("Product.ProductInfo.Size"):</div>
                <div class="details-param-value">
                    <div class="inline" data-ng-init="product.offerSelected.Length = '@length'" data-ng-bind="product.offerSelected.Length" @Html.InplaceOffer(ngOffer, OfferInplaceField.Length)>@length</div> 
                    x 
                    <div class="inline" data-ng-init="product.offerSelected.Width = '@width'" data-ng-bind="product.offerSelected.Width" @Html.InplaceOffer(ngOffer, OfferInplaceField.Width)>@width</div> 
                    x 
                    <div class="inline" data-ng-init="product.offerSelected.Height = '@height'" data-ng-bind="product.offerSelected.Height" @Html.InplaceOffer(ngOffer, OfferInplaceField.Height)>@height</div>
                </div>
            </div>
        }
    }
    @if (SettingsCatalog.DisplayWeight && offer != null)
    {
        <div class="details-row details-weight" data-ng-if="product.offerSelected.Weight != 0">
            <div class="details-param-name">@T("Product.ProductInfo.Weight"):</div>
            <div class="details-param-value">
                <div class="inplace-offset details-param-value-weight" data-ng-bind="product.offerSelected.Weight" data-ng-init="product.offerSelected.Weight = @offer.GetWeight().ToInvariantString()" 
                     @Html.InplaceOffer(ngOffer, OfferInplaceField.Weight)>@offer.GetWeight()</div>
                @T("Product.ProductInfo.Kg")
            </div>
        </div>
    }
    @if (product.Unit.IsNotEmpty())
    {
        <div class="details-row details-unit">
            <div class="details-param-name">@T("Product.ProductInfo.Unit"):</div>
            <div class="details-param-value inplace-offset" @Html.InplaceProduct(product.ProductId, ProductInplaceField.Unit, true)>@product.Unit</div>
        </div>
    }
    @if (Model.BriefProperties != null)
    {
        foreach (var value in Model.BriefProperties)
        {
            <div class="details-row details-briefproperties">
                <div class="details-param-name">
                    @Html.Raw(@value.Property.NameDisplayed + (value.Property.Unit.IsNotEmpty() ? " (" + value.Property.Unit + ")" : string.Empty)):
                </div>
                <div class="details-param-value">
                    @Html.Raw(@value.Value)
                </div>
            </div>
        }
    }
    <div class="details-row details-availability" data-ng-init="product.offerSelected.IsAvailable = @(Model.IsAvailable ? "true" : "false");">
        <div class="availability @(Model.IsAvailable ? "available" : "not-available")"
             data-ng-class="{'available': product.offerSelected.IsAvailable === true, 'not-available' : product.offerSelected.IsAvailable === false}">
            @*data-bind-html-compile - for inplace on change avalable*@
            <div data-bind-html-compile="product.offerSelected.Available"></div>
            <div data-ng-if="product.offerSelected.Available == null">@Html.Raw(Model.Availble)</div>
        </div>
    </div>

    @if (SettingsCatalog.EnableProductRating)
    {
        <div class="details-row details-rating">
            @{
                var reviewCount = Model.ReviewsCount.RemoveChars();
                if ((reviewCount > 0 || product.RatioCount.Value > 0 || product.ManualRatio.HasValue) && !Model.Product.Adult)
                {
                    <div itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
                        <meta itemprop="ratingValue" content="@(product.ManualRatio ?? (product.Ratio == 0 ? 5 : product.Ratio))">
                        <meta itemprop="worstRating" content="1">
                        <meta itemprop="bestRating" content="5">
                        @if (reviewCount > 0)
                        {
                            <meta itemprop="reviewCount" content="@reviewCount">
                        }
                        @if (product.RatioCount.Value > 0 || product.ManualRatio.HasValue)
                        {
                            <meta itemprop="ratingCount" content="@(product.ManualRatio.HasValue ? 1 : product.RatioCount.Value)">
                        }
                    </div>
                }
            }
            @Html.Rating(product.ManualRatio ?? product.Ratio, product.ProductId, "productExt/addrating", Model.RatingReadOnly)
        </div>
    }
    @if (offer != null)
    {
        <div class="details-row details-amount" data-ng-if="product.offerSelected.IsAvailable === true || @(Model.AllowBuyOutOfStockProducts.ToLowerString()) && product.data.AllowPreOrder">
            <div class="details-param-name">
                @T("Product.ProductInfo.Amount"):
                @if (SettingsCheckout.AmountLimitation)
                {
                    <div ng-show="product.offerSelected.AmountBuy > product.offerSelected.Amount" class="ng-hide availability not-available">
                        <span>@T("Product.ProdcutInfo.Available")</span>
                        <div class="details-avalable-text" ng-bind="product.offerSelected.Amount"></div>
                        <div class="details-avalable-unit" ng-bind="product.data.Unit"></div>
                    </div>
                }
            </div>
            <div class="details-param-value">
                <div class="details-spinbox-block">
                    <div data-spinbox
                         data-value="product.offerSelected.AmountBuy"
                         data-proxy="product.offerSelected"
                         data-update-fn="product.updateAmount(value, proxy)"
                         data-step="@product.Multiplicity.ToInvariantString()"
                         data-max="@product.MaxAmount.ToInvariantString(Int16.MaxValue)"
                         data-min="@prodMinAmount.ToInvariantString()"></div>
                </div>
                @Html.RenderModules("product_offer_info_amount_spinbox", new { product, offer })
            </div>
        </div>

        <div class="details-row">
            @Html.RenderModules("product_offer_info_after_amount", new { product, offer })
        </div>
    }
    @if (Model.ShowBriefDescription)
    {
        <div class="details-row details-briefdescription">
            <div @Html.InplaceProduct(product.ProductId, ProductInplaceField.BriefDescription)>@Html.Raw(product.BriefDescription)</div>
            <div>@Html.RenderModules("product_after_briefdescription", new { product, offer })</div>
            @if (product.BriefDescription.IsNotEmpty())
            {
                <div><a href="@Url.AbsoluteRouteUrl("Product", new { url= product.UrlPath })">@T("Product.ProductInfo.More")</a></div>
            }
        </div>
    }

    @if (offer != null)
    {
        @Html.Action("SizeColorPicker", "Product", new { product, color =  Model.ColorId, size = Model.SizeId })

        if (Model.HasCustomOptions)
        {
            @Html.Action("CustomOptions", "Product", new { product.ProductId })
        }

        <div class="details-row">
            @Html.RenderModules("product_info", new { product, offer })
        </div>
        if (!Model.HidePrice || !string.IsNullOrEmpty(Model.TextInsteadOfPrice))
        {
            <div class="details-row details-payment cs-br-1">
                <div class="details-payment-block">

                    @if (Model.MicrodataOffers != null && Model.MicrodataAggregateOffer != null && !Model.Product.Adult)
                    {
                        <div itemprop="offers" itemscope itemtype="https://schema.org/AggregateOffer">
                            <meta itemprop="priceCurrency" content="@Model.MicrodataAggregateOffer.Currency">
                            <meta itemprop="highPrice" content="@Model.MicrodataAggregateOffer.HighPrice">
                            <meta itemprop="lowPrice" content="@Model.MicrodataAggregateOffer.LowPrice">
                            <meta itemprop="offerCount" content="@Model.MicrodataOffers.Count">
                            @foreach (var offerItem in Model.MicrodataOffers)
                            {
                                <div itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                                    <meta itemprop="price" content="@offerItem.Price">
                                    <meta itemprop="priceCurrency" content="@Model.MicrodataAggregateOffer.Currency">
                                    <meta itemprop="sku" content="@offerItem.Name">
                                    <link itemprop="url" href="@Url.AbsoluteRouteUrl("Product", new { url = product.UrlPath, color = offerItem.ColorId, size = offerItem.SizeId })">
                                    <meta itemprop="priceValidUntil" content="@DateTime.Now.AddHours(1).ToString("yyyy-MM-dd HH:mm:ss")">
                                    <link itemprop="availability" href="@(offerItem.Available ? "https://schema.org/InStock" : "https://schema.org/OutOfStock")" />
                                </div>
                            }
                        </div>
                    }
                    @if (!Model.HidePrice)
                    {
                        <div class="details-payment-cell details-payment-price" data-ng-init="product.discount=@product.Discount.Percent.ToInvariantString(); product.discountAmount=@product.Discount.Amount.ToInvariantString(); product.Price.PriceNumber=@Model.FinalPrice.ToInvariantString();">
                            <div class="price">
                                <div data-ng-if="product.Price.PriceString == null"><div @Html.InplaceOfferPrice()>@Html.Raw(Model.PreparedPrice)</div></div>
                                <div @Html.InplaceOfferPrice() data-ng-bind-html="product.Price.PriceString"></div>
                            </div>
                            <span class="first-payment-price" data-ng-class="{'ng-hide': product.dirty === false ? @(!Model.IsAvailableForPurchaseOnCredit ? "true" : "false") : product.visibilityFirstPaymentButton === false || (product.offerSelected.Amount === 0 && @notAllowBuyOutOfStockProducts) || product.Price.PriceNumber === 0}">
                                @if (Model.IsAvailableForPurchaseOnCredit)
                                {
                                    <span data-ng-if="product.FirstPaymentPrice == null">@Html.Raw(Model.FirstPaymentPrice)</span>
                                }
                                <span data-ng-bind-html="product.FirstPaymentPrice"></span>
                            </span>
                            @if (!string.IsNullOrEmpty(Model.BonusPrice))
                            {
                                <span class="bonus-string-sum" data-ng-if="product.Price.Bonuses == null">@T("Product.ProductInfo.BonusesOnCard", Model.BonusPrice)</span>
                                <span class="bonus-string-sum" data-ng-bind-html="product.Price.Bonuses"></span>
                            }
                        </div>
                        <div class="details-payment-cell">
                            @if (Model.ShowAddButton)
                            {
                                <div class="details-payment-item details-payment-inline @(!Model.IsAvailableForPurchase ? "ng-hide" : string.Empty)"
                                     data-ng-class="{'ng-hide': product.dirty === false ? @(!Model.IsAvailableForPurchase ? "true" : "false") : (product.offerSelected.Amount <= 0 && @notAllowBuyOutOfStockProducts) || ((product.Price.PriceNumber < 0 || (product.Price.PriceNumber === 0 && product.Price.PriceOldNumber == 0)) && @notAllowBuyOutOfStockProducts) || (@notAllowBuyOutOfStockProducts && @SettingsCheckout.AmountLimitation.ToLowerString() && product.offerSelected.AmountBuy > product.offerSelected.Amount) }">
                                    <a href="javascript:void(0)"
                                       class="btn btn-middle btn-confirm icon-bag-before"
                                       data-cart-add
                                       data-cart-add-valid="product.validate()"
                                       data-offer-id="product.offerSelected.OfferId"
                                       data-product-id="@product.ProductId"
                                       data-amount="product.offerSelected.AmountBuy"
                                       data-attributes-xml="product.customOptions.xml">@SettingsCatalog.BuyButtonText</a>
                                </div>
                            }
                            @if (Model.ShowPreOrderButton)
                            {
                                <div class="details-payment-item details-payment-inline @(Model.IsAvailableForPurchase ? "ng-hide" : string.Empty)"
                                     data-ng-class="{'ng-hide': product.dirty === false ? @(Model.IsAvailableForPurchase ? "true" : "false") : (product.offerSelected.Amount > 0 || @Model.AllowBuyOutOfStockProducts.ToLowerString()) && (product.Price.PriceNumber > 0 || @Model.AllowBuyOutOfStockProducts.ToLowerString())}">
                                    <a href="javascript:void(0)"
                                       class="btn btn-middle btn-action"
                                       data-cart-preorder
                                       data-cart-preorder-valid="product.validate()"
                                       data-offer-id="product.offerSelected.OfferId"
                                       data-product-id="@product.ProductId"
                                       data-amount="product.offerSelected.AmountBuy"
                                       data-attributes-hash="product.customOptions.jsonHash">@Model.PreOrderButtonText</a>
                                </div>
                            }

                            @if (Model.ShowCreditButton)
                            {
                                 <div class="details-payment-item details-payment-inline @(!Model.IsAvailableForPurchaseOnCredit ? "ng-hide" : string.Empty)"
                                     data-ng-class="{'ng-hide': product.dirty === false ? @(!Model.IsAvailableForPurchaseOnCredit ? "true" : "false") : product.visibilityFirstPaymentButton === false || (product.offerSelected.Amount <= 0 && @notAllowBuyOutOfStockProducts || product.Price.PriceNumber === 0 || (@notAllowBuyOutOfStockProducts && @SettingsCheckout.AmountLimitation.ToLowerString() && product.offerSelected.AmountBuy > product.offerSelected.Amount))}">
                                    <a href="javascript:void(0)"
                                       class="btn btn-middle btn-action"
                                       data-cart-add
                                       data-cart-add-valid="product.validate()"
                                       data-offer-id="product.offerSelected.OfferId"
                                       data-product-id="@product.ProductId"
                                       data-amount="product.offerSelected.AmountBuy"
                                       data-payment="@(Model.FirstPaymentId)"
                                       data-attributes-xml="product.customOptions.xml">@Model.CreditButtonText</a>
                                    @*<div class="cs-t-3 first-payment-note">@T("Product.ProductInfo.CreditNote")</div>*@
                                </div>
                            }

                            @if (Model.ShowBuyOneClick)
                            {
                                <div class="details-payment-item @(!Model.IsAvailableForPurchaseOnBuyOneClick ? "ng-hide" : string.Empty)"
                                     data-ng-class="{'ng-hide': product.dirty === false ? @(!Model.IsAvailableForPurchaseOnBuyOneClick ? "true" : "false") : product.offerSelected.Amount === 0 || product.Price.PriceNumber === 0 || (product.offerSelected.AmountBuy > product.offerSelected.Amount) || (product.Price.PriceNumber * product.offerSelected.AmountBuy < @Model.MinimumOrderPrice.ToInvariantString())}">
                                    <div class="details-buy-one-click">
                                        <a href="javascript:void(0)" class="link-dotted-invert cs-l-d-1" data-buy-one-click-trigger data-buy-one-click-modal="modalBuyOneClick_@product.ProductId">
                                            @SettingsCheckout.BuyInOneClickLinkText
                                            <div id="modalBuyOneClick_@product.ProductId" class="modal ng-hide"
                                                 data-modal-control
                                                 data-modal-overlay-class="buy-one-ckick-very-top"
                                                 data-modal-class="buy-one-click-dialog"
                                                 data-callback-close="buyOneClickTrigger.modalCallbackClose(modalScope)">
                                                <div data-modal-header class="modal-header">
                                                    @T("Product.BuyInOneClick.BuyInOneClickHeader")
                                                </div>
                                                <div class="modal-content">
                                                    <div data-buy-one-click-form="true"
                                                         data-form-init="buyOneClickTrigger.formInit(form)"
                                                         data-success-fn="buyOneClickTrigger.successFn(result)"
                                                         data-page="@AdvantShop.Orders.BuyInOneclickPage.Product"
                                                         data-order-type="@AdvantShop.Core.Services.Orders.OrderType.OneClick"
                                                         data-offer-id="product.offerSelected.OfferId"
                                                         data-product-id="@product.ProductId"
                                                         data-amount="product.offerSelected.AmountBuy"
                                                         data-buy-one-click-valid="product.validate()"
                                                         data-attributes-xml="product.customOptions.xml"
                                                         data-enable-phone-mask="@SettingsMain.EnablePhoneMask.ToLowerString()">
                                                    </div>
                                                </div>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(Model.TextInsteadOfPrice))
                    {
                        <div class="details-payment-cell details-payment-price">
                            <div class="instead__text-price price">
                                @Html.Raw(Model.TextInsteadOfPrice)
                            </div>
                        </div>
                    }
                </div>

            </div>
        }
    }
    @Html.StaticBlock("DescriptionDetails")
