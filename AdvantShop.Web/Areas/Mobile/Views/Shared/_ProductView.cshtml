@using AdvantShop.Orders
@using AdvantShop.ViewModel.Shared
@using AdvantShop.Catalog
@using AdvantShop.Core.Services.Configuration.Settings
@model AdvantShop.Core.Services.Catalog.ProductViewModel

@foreach (var product in Model.Products)
{
    var productUrl = Url.AbsoluteRouteUrl("Product", new { url = product.UrlPath });
    var imgSrc = product.Photo.ImageSrcSmall();
    <div class="mobile-product-view-item mobile-product-view__item cs-t-1 js-products-view-block" data-product-view-item data-offer-id="@product.OfferId" data-product-id="@product.ProductId"
         data-offer="{Amount: @product.Amount.ToInvariantString(), RoundedPrice: @product.RoundedPrice.ToInvariantString(), OfferId: @product.OfferId}">
        <div class="mobile-product-view-item-image-wrap">
            @if (product.CountPhoto > 0)
            {
                var isUseScroll = product.CountPhoto > 1;
                <a href="@productUrl" class="mobile-product-view-item-image-block" @Html.Raw(isUseScroll ? "data-ng-if=\"productViewItem.isLoad !== true || productViewItem.photos == null || productViewItem.photos.length === 0\"" : "")>
                    <span class="mobile-product-view-item-image-inner" style="height: @(Model.BlockProductPhotoHeight)px;">
                        <img src="@product.Photo.ImageSrc(Model.ProductImageType)"
                             data-ng-src="{{productViewItem.getPictureByViewMode(@Html.Raw(product.StartPhotoJson))}}"
                             alt="@Html.AttributeEncode(product.Photo.Alt)"
                             title="@Html.AttributeEncode(product.Photo.Title)"
                             onerror="this.src = '@PhotoService.GetNoPhotoPath(Model.ProductImageType)'"
                             loading="lazy"
                             class="mobile-product-view-item-image"
                             width="@(Model.PhotoWidth)"
                             height="@(Model.PhotoHeight)">
                    </span>
                </a>
                if (isUseScroll)
                {
                    <a href="@productUrl" data-product-view-scroll-photos class="mobile-product-view-item-image-block ng-cloak" data-ng-if="productViewItem.isLoad === true && productViewItem.photos.length > 0">
                        <span class="mobile-product-view-item-image-inner" style="height: @(Model.BlockProductPhotoHeight)px;" 
                              data-ng-repeat="photosItem in productViewItem.photos | limitTo:5 track by photosItem.PhotoId">
                            <img data-ng-src="{{productViewItem.getPictureByViewMode([photosItem])}}"
                                 alt="{{photosItem.Alt}}"
                                 title="{{photosItem.Title}}"
                                 onerror="this.src = '@PhotoService.GetNoPhotoPath(Model.ProductImageType)'"
                                 class="mobile-product-view-item-image"
                                 width="@(Model.PhotoWidth)"
                                 height="@(Model.PhotoHeight)">
                        </span>
                    </a>
                }
            }
            else
            {
                <a href="@productUrl" class="mobile-product-view-item-image-block">
                    <span class="mobile-product-view-item-image-inner" style="height: @(Model.BlockProductPhotoHeight)px;">
                        <img src="@PhotoService.GetNoPhotoPath(Model.ProductImageType)"
                             data-ng-src="{{productViewItem.getPictureByViewMode(@Html.Raw(product.StartPhotoJson))}}"
                             alt="@Html.AttributeEncode(product.Name)"
                             title="@Html.AttributeEncode(product.Name)"
                             loading="lazy"
                             class="mobile-product-view-item-image"
                             width="@(Model.PhotoWidth)"
                             height="@(Model.PhotoHeight)">
                    </span>
                </a>
            }
            @if (product.Gifts)
            {
                <div class="prod-gift-icon"></div>
            }
            @*@Html.Action("WishListBlock", "Wishlist", new { OfferId = product.OfferId, NgOfferId = product.OfferId, NgNameCallbackInit = "product.wishlistControlInit", Mode = "product", Checked = ShoppingCartService.CurrentWishlist.Any(x => x.OfferId == product.OfferId), area = "" })*@
        </div>
        <div class="mobile-prod-info-wrap prod-text">
            @if (Model.DisplayProductArtNo)
            {
                <div class="mobile-prod-artno cs-t-7">@product.ArtNo</div>
            }


            @if (product.Recomend || product.Sales || product.Bestseller || product.New || product.TotalDiscount.HasValue)
            {
                <div class="products-view-labels">
                    @Html.RenderLabels(product.Recomend, product.Sales, product.Bestseller, product.New, product.TotalDiscount)
                </div>
            }

            @if (Model.DisplayRating)
            {
                <div class="products-view-rating">
                    @Html.Partial("_Rating", new RatingViewModel(product.ManualRatio ?? product.Ratio))
                </div>
            }

            <div class="prod-name text-floating"><a href="@productUrl">@Html.Raw(product.Name)</a></div>

            @if (!Model.HidePrice)
            {
                <span class="price cs-l-8">@Html.Raw(product.PreparedPrice)</span>
            }
            else
            {
                <span class="price cs-l-8">@Html.Raw(Model.TextInsteadOfPrice)</span>
            }
            @if (!string.IsNullOrEmpty(product.Colors))
            {
                <div class="mobile-product-view-item__colors-wrap">
                    <div class="mobile-product-view-item__colors-inner">
                        @Html.Partial("_Colors", new ColorsViewModel()
                        {
                            NgColors = product.Colors,
                            ColorWidth = Model.ColorImageWidth,
                            ColorHeight = Model.ColorImageHeight,
                            SelectedColors = Model.SelectedColors,
                            ColorsViewMode = SettingsCatalog.ColorsViewMode
                        })
                    </div>
                </div>
            }
            else
            {
                <div class="products-view-colors-empty products-view-list-element-hidden products-view-table-element-hidden" style="height: @(Model.ColorImageHeight)px"></div>
            }

            @if (SettingsMobile.ShowAddButton)
            {
                var showBuyButton = ((product.RoundedPrice > 0 && product.Amount > 0) || Model.AllowBuyOutOfStockProducts);
                var showPreOrderButton = Model.DisplayPreOrderButton && (product.RoundedPrice == 0 || product.Amount <= 0) && product.AllowPreorder && product.OfferId != 0 && !Model.AllowBuyOutOfStockProducts;

            <div class="mobile-product-view-item__btn-wrap">
                @if (showBuyButton)
                {
                    <a href="@productUrl" data-source="mobile" data-ng-href="{{productViewItem.getUrl('@productUrl')}}" data-cart-add data-offer-id="0" data-product-id="@product.ProductId" data-amount="@product.MinAmount.ToInvariantString()" class="btn btn-small btn-buy icon-bag-before products-view-buy">@Model.BuyButtonText</a>
                }
                @if (showPreOrderButton)
                {
                    <a href="@Url.RouteUrl("PreOrder", new {offerid= product.OfferId})" data-cart-preorder data-offer-id="productViewItem.offerId" class="btn btn-small btn-action icon-bag-before products-view-buy">@Model.PreOrderButtonText</a>
                }
               
            </div>
            }

        </div>
    </div>
}