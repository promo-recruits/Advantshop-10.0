@model AdvantShop.Web.Admin.Models.Customers.CustomerSegments.CustomerSegmentModel
@{
    if (Request.RawUrl.Contains("customersegmentscrm"))
    {
        Layout = "~/Areas/Admin/Views/Leads/_CrmLayout.cshtml";
        ViewBag.NavMenu = "customers";
    }
}

<form method="POST" action="@Url.Action("AddEdit")" enctype="multipart/form-data" name="form">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.IsEditMode)

    @Html.Back(T("Admin.Customers.ViewSegments.Segments").ToString(), "./settingscustomers#?tab=customerSegments")

    <div class="sticky-page-name" sticky sticky-top="0">
        <div class="page-name-block sticky-page-name-inner">
            <div class="page-name-block-item-main">
                <h1 class="page-name-block-text sticky-page-name-text">
                    @Html.Raw(Model.IsEditMode ? T("Admin.CustomerSegments.AddEdit.Segment") + Model.Name + "\"</strong>" : T("Admin.CustomerSegments.AddEdit.NewSegment").ToString())
                </h1>
            </div>
            <div class="page-name-block-item-additional">
                <a href="" class="link-danger m-r-xs" ng-click="customerSegment.deleteSegment(@Model.Id)">@T("Admin.CustomerSegments.AddEdit.Delete")</a>
                @Html.Button(T("Admin.Save"), eButtonType.Save, eButtonSize.Small, eColorType.Success, validation: true, attributes: new[] { "ng-disabled=\"!form.modified\"", "disabled" })
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12 col-wl-12">
            <div class="ibox">
                <div class="ibox-content category-content border_none">

                    <div class="row middle-xs m-b-lg">
                        <div class="flex-grow-n col-xs-1">
                            <span class="text-required">@T("Admin.CustomerSegments.AddEdit.Name")</span>
                        </div>
                        <div class="flex-grow flex-basis-n flex-width-n relative">
                            @Html.TextBoxFor(x => x.Name, new { @class = "form-control", required = "required", ng_model = "customerSegment.name", validation_input_text = T("Admin.CustomerSegments.AddEdit.Name") })
                        </div>
                    </div>

                    @Html.Partial("~/Areas/Admin/Views/CustomerSegments/_Filters.cshtml", Model)

                </div>
            </div>

            @if (Model.IsEditMode)
            {
                <div class="m-t-md m-b-md clearfix">
                    <h3 class="pull-left page-name-block-text">
                        @T("Admin.CustomerSegments.AddEdit.Customers")
                    </h3>
                    <div class="pull-right">
                        <div class="flex middle-xs">
                            <div class="dropdown m-r-sm">
                                <button class="btn btn-sm btn-success dropdown-toggle" id="communicationDropdown" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @T("Admin.CustomerSegments.AddEdit.SendMessage")
                                    <span class="caret"></span>
                                </button>


                                <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="communicationDropdown">
                                    <li>
                                        <a ng-click="customerSegment.export()">@T("Admin.CustomerSegments.AddEdit.ExportCustomers")</a>
                                    </li>
                                    <li>
                                        <ui-modal-trigger data-controller="'ModalSendLetterToCustomerCtrl'"
                                                          controller-as="ctrl"
                                                          size="lg"
                                                          template-url="../areas/admin/content/src/_shared/modal/sendLetterToCustomer/sendLetterToCustomer.html"
                                                          data-resolve="{params: {customerIds: customerSegment.customerIds, pageType: 'customerSegment'}}">
                                            <a href="">@T("Admin.CustomerSegments.AddEdit.WriteEmail")</a>
                                        </ui-modal-trigger>
                                    </li>
                                    @if (Model.IsEditMode)
                                    {
                                        <li ng-init="customerSegment.getCustomerIds(@Model.Id)" class="inline m-r-xs">
                                            <ui-modal-trigger data-controller="'ModalSendSmsAdvCtrl'" controller-as="ctrl"
                                                              data-resolve="{params: { customerIds: customerSegment.customerIds, pageType: 'customerSegment'}}"
                                                              template-url="../areas/admin/content/src/_shared/modal/sendSms/sendSms.html">
                                                <a href="" class="edit link-decoration-none m-l-xs">@T("Admin.CustomerSegments.AddEdit.SendSMS")</a>
                                            </ui-modal-trigger>
                                        </li>
                                    }

                                    @if (Model.IsEditMode && Model.SegmentFilter != null && Model.SegmentFilter.IsVkUser)
                                    {
                                        <li>
                                            <ui-modal-trigger data-controller="'ModalSendSocialMessageCtrl'" controller-as="ctrl"
                                                              template-url="../areas/admin/content/src/_shared/modal/sendSocialMessage/sendSocialMessage.html"
                                                              data-resolve="{params: {customerSegmentId: @Model.Id, type: 'vk'}}">
                                                <a href="">@T("Admin.CustomerSegments.AddEdit.SendMessageToVkontakte")</a>
                                            </ui-modal-trigger>
                                        </li>
                                    }
                                </ul>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="ibox">
                    <div class="ibox-content category-content border_none">
                        <div class="row middle-xs m-b-lg">
                            <div class="col-xs-12">
                                <div>
                                    <ui-grid-custom grid-unique-id="grid"
                                                    grid-options="customerSegment.gridOptions"
                                                    grid-selection-enabled="false"
                                                    grid-url="'customerSegments/getCustomersBySegment'"
                                                    grid-params="{Id: @Model.Id}"
                                                    grid-on-init="customerSegment.gridOnInit(grid)"
                                                    grid-show-export="true">
                                    </ui-grid-custom>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</form>