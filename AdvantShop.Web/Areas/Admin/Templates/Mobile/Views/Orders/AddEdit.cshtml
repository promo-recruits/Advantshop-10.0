@using AdvantShop.Core.Services.Configuration.Settings
@using AdvantShop.Core.Services.Orders
@model AdvantShop.Web.Admin.Models.Orders.OrdersEdit.OrderModel
@{
    var order = Model.Order;
    var isDraft = !Model.IsEditMode || Model.Order == null || Model.Order.IsDraft;
    var customerId = Guid.Empty;
    string orderStatusId = null;

    if (order != null)
    {
        if (order.OrderCustomer != null)
        {
            customerId = order.OrderCustomer.CustomerID;
        }

        orderStatusId = order.OrderStatusId.ToString();
    }
    else
    {
        var status = Model.OrderStatuses.FirstOrDefault();
        orderStatusId = status != null ? status.Value : null;
    }
}

<form method="POST" action="@(!isDraft ? Url.Action("Edit") : Url.Action("Add"))" novalidate="novalidate" name="form" id="orderForm">
    @Html.AntiForgeryToken()

    <div ng-init="order.initOrder(@Model.OrderId, @Model.IsEditMode.ToLowerString(), @isDraft.ToLowerString(), '@customerId', '@Model.StandardPhone')">

        <input name="IsEditMode" type="hidden" value="{{order.isEditMode}}" />
        <input name="OrderId" type="hidden" value="{{order.orderId}}" />
        <input name="Order.OrderId" type="hidden" value="{{order.orderId}}" />
        <input name="Order.IsDraft" type="hidden" value="{{order.isDraft}}" />

        <input name="Order.OrderCustomer.CustomerId" type="hidden" value="{{order.customerId}}" />
    </div>

    <div class="page-head page-head--sticky">
        <div class="page-head__back">
            @Html.Back("", Url.Action("Index", "Orders"))
        </div>
        <div class="page-head__content">
            <h1 class="page-head__name">Заказ</h1>
        </div>
        <div class="page-head__controls">
            <a href="@Url.Action("Add")" class="link-terna" title="@T("Admin.Orders.Index.AddOrder")">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 9.14286H9.14286V16H6.85714V9.14286H0V6.85714H6.85714V0H9.14286V6.85714H16V9.14286Z" fill="currentColor" />
                </svg>
            </a>
        </div>
    </div>

    <div class="m-b-sm">
        @if (Model.IsEditMode)
        {
            <div>
                <span class="custom-input-decorator text-color-alt">
                    <input type="datetime-local" id="Order_OrderDate" name="Order.OrderDate" class="custom-input-decorator__native"
                           required="required"
                           ng-change="order.setDateMobile(order.date)"
                           ng-model="order.date"
                           value="@order.OrderDate.ToString("yyyy-MM-ddThh:mm")" />
                    <label for="Order_OrderDate" class="custom-input-decorator__trigger custom-input-decorator__select">
                        <span class="custom-input-decorator__select-text">@order.OrderDate.ToString("dd.MM.yyyy hh:mm")</span>
                        <span class="custom-input-decorator__select-chevron">
                            <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 0 24 24" width="20" class="custom-input-decorator__select-chevron-icon">
                                <path fill="none" d="M24 24H0V0h24v24z" opacity=".87" />
                                <path fill="currentColor" d="M15.88 9.29L12 13.17 8.12 9.29c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41-.39-.38-1.03-.39-1.42 0z" />
                            </svg>
                        </span>
                    </label>
                </span>
            </div>
            <div>
                <span class="text-wl">
                    №@(order.Number)
                </span>
                <span class="m-l-sm">
                    <span class="custom-input-decorator" style="color:#@(order.OrderStatus.Color);">
                        @Html.DropDownListFor(x => x.Order.OrderStatusId, Model.OrderStatuses, new { @class = "custom-input-decorator__native", ng_model = "order.orderStatus", ng_change = "order.changeStatus()", ng_init = "order.orderStatus='" + orderStatusId + "'; order.orderStatusOld='" + orderStatusId + "'", bs_modifiable = "false" })
                        <label for="Order_OrderStatusId" class="custom-input-decorator__trigger custom-input-decorator__select">
                            <span class="custom-input-decorator__select-text">@order.OrderStatus.StatusName</span>
                            <span class="custom-input-decorator__select-chevron">
                                <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 0 24 24" width="20" class="custom-input-decorator__select-chevron-icon">
                                    <path fill="none" d="M24 24H0V0h24v24z" opacity=".87" />
                                    <path fill="currentColor" d="M15.88 9.29L12 13.17 8.12 9.29c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41-.39-.38-1.03-.39-1.42 0z" />
                                </svg>
                            </span>
                        </label>
                    </span>
                </span>
                <span class="m-l-sm">
                    <span class="custom-input-decorator" style="color:#@(order.Payed ? "2d9cee" : "ACAEAF");" ng-style="{color: '#' + (order.isPaied ? '2d9cee' : 'ACAEAF')}">
                        <select id="orderIsPayed" name="IsPayed" ng-model="order.isPaied" ng-change="order.setPaied(order.isPaied)" convert-to-bool class="custom-input-decorator__native">
                            <option value="False" @(order.Payed ? "" : "selected")>@T("Admin.Orders.AddEdit.UnPaid")</option>
                            <option value="True" @(order.Payed ? "selected" : "")>@T("Admin.Orders.AddEdit.Paid")</option>
                        </select>
                        <label for="orderIsPayed" class="custom-input-decorator__trigger custom-input-decorator__select">
                            <span class="custom-input-decorator__select-text">@(order.Payed ? T("Admin.Orders.AddEdit.Paid") : T("Admin.Orders.AddEdit.UnPaid"))</span>
                            <span class="custom-input-decorator__select-chevron">
                                <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 0 24 24" width="20" class="custom-input-decorator__select-chevron-icon">
                                    <path fill="none" d="M24 24H0V0h24v24z" opacity=".87" />
                                    <path fill="currentColor" d="M15.88 9.29L12 13.17 8.12 9.29c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41-.39-.38-1.03-.39-1.42 0z" />
                                </svg>
                            </span>
                        </label>
                    </span>
                </span>
                @if (isDraft)
                {
                    @Html.Button(T("Admin.Orders.Index.AddOrder"), eButtonType.Save, attributes: new[] { "ng-disabled=\"order.orderId == 0 && order.lastName == null && order.firstName == null && order.patronymic == null && order.email == null && order.phone == null\"", "disabled" })
                }
            </div>
        }
        else
        {
            <span class="text-lg">@T("Admin.Orders.AddEdit.CreationOfNewOrder")</span>
        }
    </div>

    @Html.Partial("_OrderInfo", Model)

    <div class="m-t-md">
        @if (Model.IsEditMode)
        {
            if (SettingsCheckout.ManagerConfirmed)
            {
                <div class="inline vertical-middle">
                    <label>
                        @Html.CheckBoxFor(x => x.Order.ManagerConfirmed, new { ng_model = "order.ManagerConfirmed", ng_change = "order.setManagerConfirmer(order.ManagerConfirmed)", ng_init = "order.ManagerConfirmed=" + (Model.Order != null ? Model.Order.ManagerConfirmed.ToLowerString() : "false") })
                        @T("Admin.Orders.AddEdit.OrderIsConfirmedAllowPay")
                    </label>
                </div>
            }
            if (Model.IsEditMode && order != null && Settings1C.Enabled)
            {
                <div class="inline vertical-middle m-l-sm">
                    <label>
                        @Html.CheckBoxFor(x => x.Order.UseIn1C, new { ng_model = "order.UseIn1C", ng_change = "order.set1CExportOrder(order.UseIn1C)", ng_init = "order.UseIn1C=" + (Model.Order != null ? Model.Order.UseIn1C.ToLowerString() : "false") })
                        @T("Admin.Orders.AddEdit.ExportOrder")
                    </label>
                    @{
                        var status1C = OrderStatus1CService.GetStatus1C(order.OrderID);
                        if (status1C != null)
                        {
                            <div>@T("Admin.Orders.AddEdit.OrderStatusIn1C")@status1C.Status1C</div>
                        }
                    }
                </div>
            }
        }

        @Html.RenderModules("admin_order_top", new { orderId = Model.OrderId })

        @if (isDraft)
        {
            @Html.Partial("_OrderCustomer")
        }
    </div>

    @Html.Partial("_OrderItems")

    @if (Model.IsEditMode)
    {
        @Html.Action("ClientInfo", Model)
    }

    @Html.Partial("_Additionally", Model)

    @if (Model.IsEditMode)
    {
        if (AdvantShop.Core.Services.Bonuses.BonusSystem.IsActive && (!AdvantShop.Saas.SaasDataService.IsSaasEnabled || AdvantShop.Saas.SaasDataService.CurrentSaasData.BonusSystem))
        {
            @Html.Partial("_ClientBonusCard")
        }
    }

    @if (Model.IsEditMode)
    {
        @Html.Partial("_TemplateDocx", Model)
    }
    @Html.RenderModules("admin_order_right", new { orderId = Model.OrderId })


    @if (Model.IsEditMode)
    {

        <div class="m-t-md">
            <uib-tabset active uid="orderTabs" headers-overflow-type="scroll">
                @if (Model.Customer != null)
                {
                    <uib-tab index="0" heading="@T("Admin.Orders.AddEdit.Сommunications")" classes="ng-tab" removable="true">
                        <div>
                            <lead-events class="lead-events--mobile" customer-id="'@Model.Customer.Id'" obj-id="@Model.OrderId" obj-type="'order'" page-type="order" on-init="order.leadEventsOnInit(leadEvents)" bs-modifiable="false">
                            </lead-events>
                        </div>
                    </uib-tab>
                }

                <uib-tab index="1" heading="@T("Admin.Orders.AddEdit.OrderDiscussion")" classes="ng-tab" removable="true">
                    <div class="customer-tabs--bg-grey">
                        <div class="ibox-content">
                            <admin-comments obj-id="order.orderId" type="'order'" form-visible="true" bs-modifiable="false"></admin-comments>
                        </div>
                    </div>
                </uib-tab>

                <uib-tab index="2" heading="@T("Admin.Orders.AddEdit.ChangesHistory")" classes="ng-tab" removable="true">
                    <div class="customer-tabs--bg-grey">
                        <div class="ibox-content">
                            <order-status-history data-order-id="@Model.OrderId" on-init="order.statusHistoryOnInit(orderStatusHistory)"></order-status-history>
                            <order-history data-order-id="@Model.OrderId" on-init="order.orderHistoryOnInit(orderHistory)"></order-history>
                        </div>
                    </div>
                </uib-tab>

                @if (Model.ShowTasks)
                {
                    <uib-tab index="3" heading="@T("Admin.Orders.AddEdit.Tasks") {{order.taskGrid.gridTasks.gridOptions.totalItems > 0 ? '(' + order.taskGrid.gridTasks.gridOptions.totalItems + ')' : ''}}"
                             classes="ng-tab">
                        <div class="customer-tabs--bg-grey">
                            <div class="ibox-content">
                                <tasks-grid obj-id="order.orderId" type="order"
                                            on-init="order.taskGridOnOnit(taskGrid)"
                                            is-admin="@CustomerContext.CurrentCustomer.IsAdmin.ToLowerString()">
                                </tasks-grid>
                            </div>
                        </div>
                    </uib-tab>
                }
            </uib-tabset>
        </div>
    }


    @*<div class="order-nav m-t-md">
        @if (Model.PrevOrderId.HasValue)
        {
            <a href="@Url.Action("Edit", "Orders", new { id = Model.PrevOrderId.Value })" class="order-nav__control">
                <svg width="20" height="26" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M.226 8.543c-.301-.3-.301-.785 0-1.086L7.362.326a1.113 1.113 0 011.575 1.573L2.832 8l6.105 6.1a1.114 1.114 0 01-1.575 1.574L.226 8.544z" fill="currentColor"></path>
                </svg>
            </a>
        }
        else
        {
            <span class="order-nav__control order-nav__control--disabled">
                <svg width="20" height="26" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M.226 8.543c-.301-.3-.301-.785 0-1.086L7.362.326a1.113 1.113 0 011.575 1.573L2.832 8l6.105 6.1a1.114 1.114 0 01-1.575 1.574L.226 8.544z" fill="currentColor"></path>
                </svg>
            </span>
        }
        @if (Model.NextOrderId.HasValue)
        {
            <a href="@Url.Action("Edit", "Orders", new { id = Model.NextOrderId.Value})" class="order-nav__control order-nav__control--rotate m-l-md">
                <svg width="20" height="26" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M9.032 8.543a.766.766 0 000-1.086L1.896.326A1.113 1.113 0 00.321 1.899L6.426 8 .321 14.1a1.114 1.114 0 001.575 1.574l7.136-7.13v-.001z" fill="currentColor" />
                </svg>
            </a>
        }
        else
        {
            <span class="order-nav__control order-nav__control--disabled m-l-md">
                <svg width="20" height="26" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M9.032 8.543a.766.766 0 000-1.086L1.896.326A1.113 1.113 0 00.321 1.899L6.426 8 .321 14.1a1.114 1.114 0 001.575 1.574l7.136-7.13v-.001z" fill="currentColor" />
                </svg>
            </span>
        }
    </div>*@

    @if (Model.IsEditMode)
    {
        <div class="text-center m-t-md">
            <a class="btn btn-md btn-success btn-outline order-btn--min-width" href="@Url.Action("ExportOrder", "Analytics", new { orderId = Model.OrderId })">@T("Admin.Orders.AddEdit.ExportExcel")</a>
        </div>

        <div class="text-center m-t-md">
            <a class="btn btn-md btn-success btn-outline order-btn--min-width" href="@Url.AbsoluteRouteUrl("PrintOrder", new { code = order.Code, showMap = "true" }){{order.gridOrderItemsSorting}}" target="_blank"
               onclick="return advTrack('@AdvantShop.Track.ETrackEvent.Core_Orders_PrintOrder_AdminArea.ToString()');">
                @T("Admin.Orders.AddEdit.Print")
            </a>
        </div>

        <div class="text-center m-t-md">
            @Html.Button(@T("Admin.Orders.AddEdit.DeleteOrder"), eButtonType.Simple, eButtonSize.Middle, eColorType.Danger, null, null, "deleteOrder", false, new[] { "ng_click=\"order.deleteOrder()\"" }, true)
        </div>
    }

</form>