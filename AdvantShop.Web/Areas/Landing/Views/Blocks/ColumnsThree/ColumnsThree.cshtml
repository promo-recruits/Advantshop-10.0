@model BlockModel

@{
    var items = Model.Block.TryGetSettingAsList<TextModel>("items");

    var itemsForRender = new List<TextModel>();

    var itemsCountInBlock = (int)Model.Block.TryGetSetting("rows_in_block");
    var itemsCountInRow = (int)Model.Block.TryGetSetting("items_in_row");
    var itemsTotalInRowInBlock = itemsCountInRow * itemsCountInBlock;


    if (itemsCountInBlock == 0)
    {
        itemsCountInBlock = 1;
    }

    if (items != null && items.Count > 0)
    {
        itemsForRender = items.Take(itemsTotalInRowInBlock).ToList();
    }

}


<div class="container-fluid">
    <div class="lp-container" data-ng-controller="ColumnsCtrl as columns">
        <div class="row center-xs lp-block-columns-three__row">
            @if (Model.Block.TryGetSetting("show_title") == true || Model.Block.TryGetSetting("show_subtitle") == true)
            {
                <div class="col-xs-12">
                    <div class="lp-block-columns-header">
                        @if (Model.Block.TryGetSetting("show_title") == true)
                        {
                            <div class="lp-h2 lp-h2--color">
                                @Html.SubBlock(Model, "title")
                            </div>
                        }
                        @if (Model.Block.TryGetSetting("show_subtitle") == true)
                        {
                            <div class="lp-h3 lp-h3--color">
                                @Html.SubBlock(Model, "subtitle")
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="flex flex-wrap center-xs" @Html.Raw(Model.Inplace ? "lozad-adv=\"blocksConstructorContainer.getData()\"" : "")>

            @if (itemsForRender.Any())
            {

                float width = 100 / itemsCountInRow;
                var widthString = width.ToInvariantString() + "%";
                var minWidth = LpService.SiteWidthContent / Model.Block.TryGetSetting("items_in_row");
                <style>
                    #block_@Model.Block.Id .lp-block-columns-text {
                        min-width: 100%;
                        -webkit-flex-basis: 100%;
                        -ms-flex-preferred-size: 100%;
                        flex-basis: 100%;
                        max-width: 100%;
                    }
                        @@media (min-width: 48em) {
                            #block_@Model.Block.Id .lp-block-columns-text {
                                -webkit-flex-basis: @(widthString);
                                -ms-flex-preferred-size: @(widthString);
                                flex-basis: @(widthString);
                                max-width: @(widthString);
                                min-width: @(minWidth)px;
                            }
                        }
                </style>

                for (var i = 0; i < itemsForRender.Count; i++)
                {
                    <div class="text-left lp-font-size--middle lp-block-columns-text lp-block-columns-three__col">
                        <div class="lp-block-columns-three__item">
                            <div class="lp-block-columns-three__header" @Html.InplaceSettings(Model.Block.Id, "blocksConstructorContainer.data", "items[" + i + "].title")>
                                @Html.Raw(items[i].Title)
                            </div>
                            <div @Html.InplaceSettings(Model.Block.Id, "blocksConstructorContainer.data", "items[" + i + "].text")>
                                @Html.Raw(items[i].Text)
                            </div>
                        </div>
                    </div>
                }
                <div class="text-left lp-font-size--middle lp-block-columns-text lp-block-columns-three__col"
                     data-ng-repeat="item in columns.columnsData track by $index">
                    <div class="lp-block-columns-three__item">
                        <div class="lp-block-columns-three__header" @Html.InplaceSettings(Model.Block.Id, "blocksConstructorContainer.data", "items[" + itemsTotalInRowInBlock + " + {{$index}}].title")
                             data-ng-bind="item.Title">
                        </div>
                        <div @Html.InplaceSettings(Model.Block.Id, "blocksConstructorContainer.data", "items[" + itemsTotalInRowInBlock + " + {{$index}}].text")
                             data-ng-bind="item.Text">
                        </div>
                    </div>
                </div>

            }
        </div>
        @if (items != null && items.Count > itemsCountInBlock)
        {
        <div class="lp-block-columns-three__more text-center" data-ng-if="@itemsTotalInRowInBlock + (columns.page * @itemsCountInRow) < @items.Count">
            <button type="button" data-ladda="columns.inProgress" class="lp-btn lp-btn--primary" data-ng-click="columns.getItems(@Model.Block.Id, @itemsCountInRow, @itemsTotalInRowInBlock + (columns.page * @itemsCountInRow), 'TextModel')">Показать еще</button>
        </div>
        }
        @if (Model.Block.TryGetSetting("show_button") == true)
        {
            <div class="row @(Model.Block.TryGetSetting("align_btns") != null ? Model.Block.TryGetSetting("align_btns") : "center-xs") lp-block-columns-button">
                <div class="col-xs-12">
                    @Html.Button(Model.Block, "button")
                </div>
            </div>
        }
    </div>
</div>
