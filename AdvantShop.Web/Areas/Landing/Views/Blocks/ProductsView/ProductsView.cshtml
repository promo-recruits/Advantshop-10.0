@using AdvantShop.App.Landing.Domain.Products;
@using AdvantShop.Configuration
@using Newtonsoft.Json;
@using AdvantShop.Catalog;
@using AdvantShop.Handlers.ProductDetails;
@model BlockModel
@{
    var quickviewValue = Convert.ToBoolean(Model.Block.TryGetSetting("quickview"));
    var hoverAnimation = Model.Block.TryGetSetting("hover_animation");
    var cssCLassForAnimation = hoverAnimation != "none" ? hoverAnimation : "";
    var heightPhoto = (float) SettingsPictureSize.SmallProductImageHeight;
    var maxPhotoView = hoverAnimation == "next-image-animation" ? 2 : 5;
    var showAvailibility = Model.Block.TryGetSetting("show_availibility");
}
<div class="container-fluid">
<div class="lp-container">
<div class="row center-xs">
    @if (Model.Block.TryGetSetting("show_title") == true)
    {
        <div class="col-xs-12">
            <div class="lp-h2 lp-h2--color lp-products-view__title @(Model.Block.TryGetSetting("show_subtitle") == false ? "lp-products-view__title--margin-bottom" : "")">
                @Html.SubBlock(Model, "title")
            </div>
        </div>
    }
    @if (Model.Block.TryGetSetting("show_subtitle") == true)
    {
        <div class="col-xs-12">
            <div class="lp-h3 lp-h3--color lp-products-view__subtitle">
                @Html.SubBlock(Model, "subtitle")
            </div>
        </div>
    }
</div>

@{
    bool moveNotAvaliableToEnd = Convert.ToBoolean(Model.Block.TryGetSetting("move_not_avaliable_to_end"));
    bool showOnlyAvailable = Convert.ToBoolean(Model.Block.TryGetSetting("show_only_available"));
    var model = LpProductService.GetProductsByIds(Model.Block.TryGetValuebleSettingAsList<int>("product_ids"), moveNotAvaliableToEnd, showOnlyAvailable);
}
@if (model != null && model.Products != null && model.Products.Count > 0)
{
    float width = 100 / (float) Model.Block.TryGetSetting("number_products_in_row");
    var widthString = width.ToInvariantString() + "%";
    var minWidth = 1159 / Model.Block.TryGetSetting("number_products_in_row");
    <style>
                #block_@Model.Block.Id .lp-products-view-item-photo-wrap {
                    position: relative;
                    display: block;
                    overflow: hidden;
                }

                #block_@Model.Block.Id .lp-products-view-item {
                    display: inline-flex;
                    width: 100%;
                }

                #block_@Model.Block.Id .lp-products-view-item-wrapper {
                    min-width: 100%;
                    -webkit-flex-basis: 100%;
                    -ms-flex-preferred-size: 100%;
                    flex-basis: 100%;
                    max-width: 100%;
                }

                #block_@Model.Block.Id .lp-products-view-item-photo {
                    height: auto;
                }

                @@media (min-width: 48em) {
                    #block_@Model.Block.Id .lp-products-view-item-wrapper {
                        -webkit-flex-basis: @(widthString);
                        -ms-flex-preferred-size: @(widthString);
                        flex-basis: @(widthString);
                        max-width: @(widthString);
                        min-width: @(minWidth)px;
                    }
                    
                                    #block_@Model.Block.Id .lp-products-view-item-photo {
                                        height: @(heightPhoto)px;
                                    }
                }
            </style>

    <div class="flex flex-wrap text-center lp-products-view">
        @{
            string modalIdPart = "modalProductViewBlock_" + Model.Block.Id.ToString() + "_";
        }

        @foreach (var product in model.Products)
        {
            var modalId = modalIdPart + product.ProductId.ToString();
            var offer = OfferService.GetOffer(product.OfferId);
            if (offer == null)
            {
                continue;
            }

            var productModel = new GetProductHandler(offer.Product, offer.ColorID, offer.SizeID, null).Get();
            var photos = productModel.Offer.Product.ProductPhotos;
            var firstPhotoForLoad = photos.Count() > 0 ? photos[0].ImageSrcMiddle() : null;
            var offers = productModel.Offer.Product.Offers;
            var isProductHasMods = offers.Count != 1;

            <div class="lp-products-view-item-wrapper js-products-view-block"
                 @Html.Raw(quickviewValue || isProductHasMods ? "data-quickview-type-view=\"landing\" data-spy-address=\"true\" data-description-mode=" + Model.Block.TryGetSetting("quickview_description") + " data-modal-id=" + modalId + "" : "")
                 data-landing-id="@LpService.CurrentLanding.Id"
                 data-product-view-item
                 data-max-photo-view="@maxPhotoView"
                 @Html.Raw(Model.Block.TryGetSetting("hide_shipping") == true ? "data-hide-shipping=\"true\"" : "")
                 data-offer-id="@product.OfferId"
                 data-product-id="@product.ProductId"
                 @(hoverAnimation == "photo-view-list" ? "data-photo-view-list data-on-change-color=photoViewList.updateActiveElements()" : "")>

                <div class="lp-products-view-item">
                    @if (Model.Block.TryGetSetting("hide_photo") == false)
                    {
                        <div class="flex center-xs">
                            <div class="lp-products-view-item-photo-wrap">
                                    <a href="@Html.Raw(quickviewValue ? "javascript:void(0)" : "{{productViewItem.picture.PathBig}}")"
                                       data-ng-init="@(hoverAnimation == "next-image-animation" || hoverAnimation == "photo-view-list" ? "productViewItem.photos = [{'PathMiddle':" + JsonConvert.SerializeObject(firstPhotoForLoad) + "}];" : "") productViewItem.picture.PathBig = '@(product.Photo.ImageSrcBig())';productViewItem.addPhotoViewer(advBaguetteBox);"
                                       class="lp-products-view-item-photo js-products-view-item @cssCLassForAnimation"
                                       @Html.Raw(Model.Block.TryGetSetting("quickview") ? "data-quickview-type-view=\"landing\" data-quickview-trigger data-spy-address=\"true\" data-description-mode=" + Model.Block.TryGetSetting("quickview_description") + " data-modal-id=" + modalId + " data-modal-class='landing-product-view-modal color-scheme--light'" : "data-adv-baguette-box")
                                       data-landing-id="@LpService.CurrentLanding.Id"
                                       @Html.Raw(Model.Block.TryGetSetting("hide_shipping") == true ? "data-hide-shipping=\"true\"" : "")
                                       data-offer-id="@product.OfferId"
                                       data-product-id="@product.ProductId"
                                       data-block-id="@Model.Block.Id">

                                        @if (hoverAnimation == null || hoverAnimation == "none" || hoverAnimation == "zoom-animation")
                                        {
                                            <img src="@product.PhotoMiddle"
                                                 data-ng-src="{{productViewItem.getPictureByViewMode([{PathMiddle: '@product.Photo.ImageSrcMiddle()'}], '@AdvantShop.FilePath.ProductImageType.Middle.ToString().ToLower()', @Html.Raw(LpService.Inplace == true ? "null" : "'Default'"))}}"
                                                 @Html.Raw(LpService.Inplace == false ? "data-qazy data-qazy-on-loaded=\"productViewItem.lazyLoadImg()\"" : "")
                                                 alt="@Html.Raw(product.Photo.Alt)"
                                                 title="@Html.Raw(product.Photo.Title)"
                                                 class="products-view-picture ng-cloak"/>
                                        }

                                        @if (hoverAnimation == "next-image-animation")
                                        {
                                            <div data-ng-if="productViewItem.photos.length > 0">
                                                <img data-ng-repeat="photo in productViewItem.photos"
                                                     data-ng-src="{{photo.PathMiddle}}"
                                                     alt="{{photo.PathMiddle.Alt}}"
                                                     title="{{photo.PathMiddle.Title}}"
                                                     class="products-view-picture ng-cloak"/>
                                            </div>
                                        }
                                        @if (hoverAnimation == "photo-view-list")
                                        {
                                            <div lozad-adv="productViewItem.enter();">
                                                <div class="lp-products-view-item__images-wrap"
                                                     data-ng-if="productViewItem.photos.length > 0">
                                                    <div class="photo-view-list__nav-wrap">
                                                        <div data-photo-view-list-nav
                                                             data-nav-index="{{$index}}"
                                                             data-ng-class="{'active': photoViewList.activeNavIndex === $index}"
                                                             data-ng-show="productViewItem.photos.length > 1"
                                                             data-ng-repeat="photo in productViewItem.photos">
                                                            <span class="lp-btn--primary"></span>
                                                        </div>
                                                    </div>
                                                    <div class="lp-products-view-item__image-wrap ng-cloak"
                                                         data-photo-view-list-item
                                                         data-ng-class="{'active': photoViewList.activeItemIndex === $index}"
                                                         data-ng-repeat="photo in productViewItem.photos">
                                                        <img data-ng-src="{{photo.PathMiddle}}"
                                                             alt="{{photo.PathMiddle.Alt}}"
                                                             title="{{photo.PathMiddle.Title}}"/>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (product.Gifts)
                                        {
                                            <div class="prod-gift-icon"></div>
                                        }
                                        <span class="products-view__labels"> @Html.RenderLabels((bool) product.Recomend, (bool) product.Sales, (bool) product.Bestseller, (bool) product.New, (Discount) product.TotalDiscount)</span>
                                    </a>
                                </div>
                            </div>
                    }

                    @if (showAvailibility == true)
                    {
                        <div class="lp-product-info__availability" data-ng-init="productViewItem.offer.IsAvailable = @(productModel.IsAvailable ? "true" : "false");">
                            <div class="availability @(productModel.IsAvailable ? "available" : "not-available")"
                                 data-ng-class="{'available': productViewItem.offer.IsAvailable === true, 'not-available' : productViewItem.offer.IsAvailable === false}">
                                <div data-bind-html-compile="productViewItem.offer.Available"></div>
                                <div data-ng-if="productViewItem.offer.Available == null">@Html.Raw(productModel.Availble)</div>
                            </div>
                        </div>
                    }

                    <div class="lp-products-view-item-link-wrap lp-h2--color js-products-view-item"
                         @Html.Raw(quickviewValue || isProductHasMods ? "data-quickview-type-view=\"landing\" data-quickview-trigger data-spy-address=\"true\" data-description-mode=" + Model.Block.TryGetSetting("quickview_description") + " data-modal-id=" + modalId + " data-modal-class='landing-product-view-modal color-scheme--light'" : "")
                         data-landing-id="@LpService.CurrentLanding.Id"
                         @Html.Raw(Model.Block.TryGetSetting("hide_shipping") == true ? "data-hide-shipping=\"true\"" : "")
                         data-offer-id="@product.OfferId"
                         data-product-id="@product.ProductId"
                         data-block-id="@Model.Block.Id">
                        <div class="lp-products-view-item-link__text">@product.Name</div>
                    </div>
                    @if (Model.Block.TryGetSetting("show_description") == true)
                    {
                        <div class="lp-products-view-item-brief-description lp-h3--color">
                            @Html.Raw(product.BriefDescription)
                        </div>
                    }
                    <div class="products-view__colors flex center-xs">
                        @if (!string.IsNullOrEmpty(product.Colors))
                        {
                            @Html.Partial("_Colors", new ColorsViewModel()
                            {
                                NgColors = product.Colors,
                                ColorWidth = model.ColorImageWidth,
                                ColorHeight = model.ColorImageHeight,
                                SelectedColors = model.SelectedColors,
                                ColorsViewMode = model.ColorsViewMode
                            })
                        }
                        else
                        {
                            <div class="products-view-colors-empty products-view-list-element-hidden products-view-table-element-hidden" style="height: @(model.ColorImageHeight - 7)px"></div>
                        }
                    </div>

                    @if (Model.Block.TryGetSetting("show_price") == true)
                    {
                        <div class="lp-products-view-item-price-block lp-h3--color">
                            <div class="lp-products-view-item-price">
                                <div class="lp-products-view-item-price-inner flex center-xs reverse-xs">@Html.Raw(product.PreparedPrice)</div>
                            </div>
                        </div>
                    }
                    @if (Model.Block.TryGetSetting("show_buybutton") == true)
                    {
                        var button = Model.Block.TryGetSetting<LpButton>("button");
                        <div class="lp-products-view-item__button-wrap">
                            <button type="button" class="lp-btn lp-btn--primary"
                                    @Html.Raw(quickviewValue || isProductHasMods ? "data-quickview-type-view=\"landing\"  data-quickview-trigger data-spy-address=\"true\" data-description-mode=" + Model.Block.TryGetSetting("quickview_description") + " data-modal-id=" + modalId + " data-modal-class='landing-product-view-modal color-scheme--light'" : "data-cart-add")
                                    data-landing-id="@LpService.CurrentLanding.Id"
                                    data-lp-id="@LpService.CurrentLanding.Id"
                                    data-mode="lp"
                                    data-offer-id="productViewItem.selectedProductOffer != null && productViewItem.selectedProductOffer.length > 0 ? productViewItem.selectedProductOffer[0].OfferId : @product.OfferId"
                                    data-product-id="@product.ProductId"
                                    data-block-id="@Model.Block.Id"
                                    @Html.Raw(LpService.EntityId != 0 ? string.Format("data-lp-entity-id=\"{0}\" data-lp-entity-type=\"{1}\"", LpService.EntityId, LpService.EntityType) : "")
                                    @Html.Raw(Model.Block.TryGetSetting("hide_shipping") == true ? "data-hide-shipping=\"true\"" : "")
                                    @Html.Raw(button != null && button.ActionUpsellLpId != null ? "data-lp-up-id=\"" + button.ActionUpsellLpId + "\"" : "")>
                                @Html.Raw(button != null && !string.IsNullOrEmpty(button.Text) ? button.Text : "Купить")
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}
else if (Model.Inplace && !LpService.PreviewInAdmin)
{
    <div class="ng-cloak lp-block-products-view__empty--admin">
        <blocks-constructor data-landingpage-id="@LpService.CurrentLanding.Id"
                            data-block-id="@Model.Block.Id"
                            data-name="@Model.Block.Name"
                            data-type="@Model.Block.Type"
                            data-is-show-options="::true"
                            data-template-custom="true">
            <button type="button" class="lp-btn lp-btn--primary" ng-click="blocksConstructor.showOptionsBlock('tabProducts')">Добавить товары</button>
        </blocks-constructor>
    </div>
}
</div>
</div>